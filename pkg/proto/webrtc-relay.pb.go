// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: webrtc-relay.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK    Status = 0
	Status_ERROR Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	Status_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0}
}

type PeerConnErrorTypes int32

const (
	PeerConnErrorTypes_CONNECTION_CLOSED            PeerConnErrorTypes = 0
	PeerConnErrorTypes_UNKNOWN_ERROR                PeerConnErrorTypes = 1
	PeerConnErrorTypes_INVALID_RELAY_PEER_CONFIG_ID PeerConnErrorTypes = 2
	PeerConnErrorTypes_INVALID_TARGET_PEERID        PeerConnErrorTypes = 3
	PeerConnErrorTypes_PEER_NOT_FOUND               PeerConnErrorTypes = 4
	PeerConnErrorTypes_CONNECTION_NOT_OPEN          PeerConnErrorTypes = 5
	PeerConnErrorTypes_NETWORK_ERROR                PeerConnErrorTypes = 6
)

// Enum value maps for PeerConnErrorTypes.
var (
	PeerConnErrorTypes_name = map[int32]string{
		0: "CONNECTION_CLOSED",
		1: "UNKNOWN_ERROR",
		2: "INVALID_RELAY_PEER_CONFIG_ID",
		3: "INVALID_TARGET_PEERID",
		4: "PEER_NOT_FOUND",
		5: "CONNECTION_NOT_OPEN",
		6: "NETWORK_ERROR",
	}
	PeerConnErrorTypes_value = map[string]int32{
		"CONNECTION_CLOSED":            0,
		"UNKNOWN_ERROR":                1,
		"INVALID_RELAY_PEER_CONFIG_ID": 2,
		"INVALID_TARGET_PEERID":        3,
		"PEER_NOT_FOUND":               4,
		"CONNECTION_NOT_OPEN":          5,
		"NETWORK_ERROR":                6,
	}
)

func (x PeerConnErrorTypes) Enum() *PeerConnErrorTypes {
	p := new(PeerConnErrorTypes)
	*p = x
	return p
}

func (x PeerConnErrorTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerConnErrorTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[1].Descriptor()
}

func (PeerConnErrorTypes) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[1]
}

func (x PeerConnErrorTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerConnErrorTypes.Descriptor instead.
func (PeerConnErrorTypes) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{1}
}

type RelayErrorTypes int32

const (
	RelayErrorTypes_UNKNOWN          RelayErrorTypes = 0
	RelayErrorTypes_INVALID_CONFIG   RelayErrorTypes = 1
	RelayErrorTypes_SERVER_NOT_FOUND RelayErrorTypes = 2
	RelayErrorTypes_INVALID_PEERID   RelayErrorTypes = 3
	RelayErrorTypes_RELAY_DESTROYED  RelayErrorTypes = 4
)

// Enum value maps for RelayErrorTypes.
var (
	RelayErrorTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_CONFIG",
		2: "SERVER_NOT_FOUND",
		3: "INVALID_PEERID",
		4: "RELAY_DESTROYED",
	}
	RelayErrorTypes_value = map[string]int32{
		"UNKNOWN":          0,
		"INVALID_CONFIG":   1,
		"SERVER_NOT_FOUND": 2,
		"INVALID_PEERID":   3,
		"RELAY_DESTROYED":  4,
	}
)

func (x RelayErrorTypes) Enum() *RelayErrorTypes {
	p := new(RelayErrorTypes)
	*p = x
	return p
}

func (x RelayErrorTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayErrorTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[2].Descriptor()
}

func (RelayErrorTypes) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[2]
}

func (x RelayErrorTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayErrorTypes.Descriptor instead.
func (RelayErrorTypes) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{2}
}

// RelayEventStream event that is sent when a message is received from any peer connected to any relayPeer on this webrtc-relay
type MsgRecivedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPeerId       string `protobuf:"bytes,1,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
	RelayPeerNumber uint32 `protobuf:"varint,2,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	Payload         []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MsgRecivedEvent) Reset() {
	*x = MsgRecivedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRecivedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRecivedEvent) ProtoMessage() {}

func (x *MsgRecivedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRecivedEvent.ProtoReflect.Descriptor instead.
func (*MsgRecivedEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0}
}

func (x *MsgRecivedEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

func (x *MsgRecivedEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *MsgRecivedEvent) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// RelayEventStream event that is sent when any relayPeer on this webrtc-relay successfully (re)connects to the peerjs server it is setup to connect to
type RelayConnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32 `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
}

func (x *RelayConnectedEvent) Reset() {
	*x = RelayConnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayConnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayConnectedEvent) ProtoMessage() {}

func (x *RelayConnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayConnectedEvent.ProtoReflect.Descriptor instead.
func (*RelayConnectedEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{1}
}

func (x *RelayConnectedEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

// RelayEventStream event that is sent when  any relayPeer on this webrtc-relay disconnects from the peerjs server it is setup to connect to
type RelayDisconnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32 `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
}

func (x *RelayDisconnectedEvent) Reset() {
	*x = RelayDisconnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayDisconnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayDisconnectedEvent) ProtoMessage() {}

func (x *RelayDisconnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayDisconnectedEvent.ProtoReflect.Descriptor instead.
func (*RelayDisconnectedEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{2}
}

func (x *RelayDisconnectedEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

// RelayEventStream event that is sent when a relayPeer encounters an error
type RelayErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32          `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	Type            RelayErrorTypes `protobuf:"varint,2,opt,name=type,proto3,enum=webrtcrelay.RelayErrorTypes" json:"type,omitempty"`
	Msg             string          `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RelayErrorEvent) Reset() {
	*x = RelayErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayErrorEvent) ProtoMessage() {}

func (x *RelayErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayErrorEvent.ProtoReflect.Descriptor instead.
func (*RelayErrorEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{3}
}

func (x *RelayErrorEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *RelayErrorEvent) GetType() RelayErrorTypes {
	if x != nil {
		return x.Type
	}
	return RelayErrorTypes_UNKNOWN
}

func (x *RelayErrorEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// RelayEventStream event that is sent when a peer connects to (or is succesfully connected to by) any relayPeer on this webrtc-relay
type PeerConnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32 `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	SrcPeerId       string `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
}

func (x *PeerConnectedEvent) Reset() {
	*x = PeerConnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerConnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConnectedEvent) ProtoMessage() {}

func (x *PeerConnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConnectedEvent.ProtoReflect.Descriptor instead.
func (*PeerConnectedEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{4}
}

func (x *PeerConnectedEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *PeerConnectedEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

// RelayEventStream event that is sent when a peer disconnects from any relayPeer on this webrtc-relay
type PeerDisconnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32 `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	SrcPeerId       string `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
}

func (x *PeerDisconnectedEvent) Reset() {
	*x = PeerDisconnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDisconnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDisconnectedEvent) ProtoMessage() {}

func (x *PeerDisconnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDisconnectedEvent.ProtoReflect.Descriptor instead.
func (*PeerDisconnectedEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{5}
}

func (x *PeerDisconnectedEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *PeerDisconnectedEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

// RelayEventStream event that is sent when a peer opens a media call with any relayPeer on this webrtc-relay
type PeerCalledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32   `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	SrcPeerId       string   `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
	StreamName      string   `protobuf:"bytes,3,opt,name=streamName,proto3" json:"streamName,omitempty"`
	TrackNames      []string `protobuf:"bytes,4,rep,name=trackNames,proto3" json:"trackNames,omitempty"` // more fields tbd
}

func (x *PeerCalledEvent) Reset() {
	*x = PeerCalledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCalledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCalledEvent) ProtoMessage() {}

func (x *PeerCalledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCalledEvent.ProtoReflect.Descriptor instead.
func (*PeerCalledEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{6}
}

func (x *PeerCalledEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *PeerCalledEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

func (x *PeerCalledEvent) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *PeerCalledEvent) GetTrackNames() []string {
	if x != nil {
		return x.TrackNames
	}
	return nil
}

// RelayEventStream event that is sent when a peer hangs up an open media call with any relayPeer on this webrtc-relay
type PeerHungupEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32 `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	SrcPeerId       string `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
}

func (x *PeerHungupEvent) Reset() {
	*x = PeerHungupEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerHungupEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHungupEvent) ProtoMessage() {}

func (x *PeerHungupEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHungupEvent.ProtoReflect.Descriptor instead.
func (*PeerHungupEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{7}
}

func (x *PeerHungupEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *PeerHungupEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

// RelayEventStream event that is sent when any data connection to a remote peer encounters an error
type PeerDataConnErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32             `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	SrcPeerId       string             `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
	Type            PeerConnErrorTypes `protobuf:"varint,3,opt,name=type,proto3,enum=webrtcrelay.PeerConnErrorTypes" json:"type,omitempty"`
	Msg             string             `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PeerDataConnErrorEvent) Reset() {
	*x = PeerDataConnErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDataConnErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDataConnErrorEvent) ProtoMessage() {}

func (x *PeerDataConnErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDataConnErrorEvent.ProtoReflect.Descriptor instead.
func (*PeerDataConnErrorEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{8}
}

func (x *PeerDataConnErrorEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *PeerDataConnErrorEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

func (x *PeerDataConnErrorEvent) GetType() PeerConnErrorTypes {
	if x != nil {
		return x.Type
	}
	return PeerConnErrorTypes_CONNECTION_CLOSED
}

func (x *PeerDataConnErrorEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// RelayEventStream event that is sent when any media connection to a remote peer  encounters an error
type PeerMediaConnErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerNumber uint32             `protobuf:"varint,1,opt,name=relayPeerNumber,proto3" json:"relayPeerNumber,omitempty"`
	SrcPeerId       string             `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
	Type            PeerConnErrorTypes `protobuf:"varint,3,opt,name=type,proto3,enum=webrtcrelay.PeerConnErrorTypes" json:"type,omitempty"`
	Msg             string             `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PeerMediaConnErrorEvent) Reset() {
	*x = PeerMediaConnErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerMediaConnErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMediaConnErrorEvent) ProtoMessage() {}

func (x *PeerMediaConnErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMediaConnErrorEvent.ProtoReflect.Descriptor instead.
func (*PeerMediaConnErrorEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{9}
}

func (x *PeerMediaConnErrorEvent) GetRelayPeerNumber() uint32 {
	if x != nil {
		return x.RelayPeerNumber
	}
	return 0
}

func (x *PeerMediaConnErrorEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

func (x *PeerMediaConnErrorEvent) GetType() PeerConnErrorTypes {
	if x != nil {
		return x.Type
	}
	return PeerConnErrorTypes_CONNECTION_CLOSED
}

func (x *PeerMediaConnErrorEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RelayEventStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId *uint32 `protobuf:"varint,1,opt,name=exchangeId,proto3,oneof" json:"exchangeId,omitempty"`
	// Types that are assignable to Event:
	//
	//	*RelayEventStream_MsgRecived
	//	*RelayEventStream_RelayConnected
	//	*RelayEventStream_RelayDisconnected
	//	*RelayEventStream_RelayError
	//	*RelayEventStream_PeerConnected
	//	*RelayEventStream_PeerDisconnected
	//	*RelayEventStream_PeerCalled
	//	*RelayEventStream_PeerHungup
	//	*RelayEventStream_PeerDataConnError
	//	*RelayEventStream_PeerMediaConnError
	Event isRelayEventStream_Event `protobuf_oneof:"event"`
}

func (x *RelayEventStream) Reset() {
	*x = RelayEventStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream) ProtoMessage() {}

func (x *RelayEventStream) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream.ProtoReflect.Descriptor instead.
func (*RelayEventStream) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{10}
}

func (x *RelayEventStream) GetExchangeId() uint32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

func (m *RelayEventStream) GetEvent() isRelayEventStream_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RelayEventStream) GetMsgRecived() *MsgRecivedEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_MsgRecived); ok {
		return x.MsgRecived
	}
	return nil
}

func (x *RelayEventStream) GetRelayConnected() *RelayConnectedEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_RelayConnected); ok {
		return x.RelayConnected
	}
	return nil
}

func (x *RelayEventStream) GetRelayDisconnected() *RelayDisconnectedEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_RelayDisconnected); ok {
		return x.RelayDisconnected
	}
	return nil
}

func (x *RelayEventStream) GetRelayError() *RelayErrorEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_RelayError); ok {
		return x.RelayError
	}
	return nil
}

func (x *RelayEventStream) GetPeerConnected() *PeerConnectedEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_PeerConnected); ok {
		return x.PeerConnected
	}
	return nil
}

func (x *RelayEventStream) GetPeerDisconnected() *PeerDisconnectedEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_PeerDisconnected); ok {
		return x.PeerDisconnected
	}
	return nil
}

func (x *RelayEventStream) GetPeerCalled() *PeerCalledEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_PeerCalled); ok {
		return x.PeerCalled
	}
	return nil
}

func (x *RelayEventStream) GetPeerHungup() *PeerHungupEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_PeerHungup); ok {
		return x.PeerHungup
	}
	return nil
}

func (x *RelayEventStream) GetPeerDataConnError() *PeerDataConnErrorEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_PeerDataConnError); ok {
		return x.PeerDataConnError
	}
	return nil
}

func (x *RelayEventStream) GetPeerMediaConnError() *PeerMediaConnErrorEvent {
	if x, ok := x.GetEvent().(*RelayEventStream_PeerMediaConnError); ok {
		return x.PeerMediaConnError
	}
	return nil
}

type isRelayEventStream_Event interface {
	isRelayEventStream_Event()
}

type RelayEventStream_MsgRecived struct {
	MsgRecived *MsgRecivedEvent `protobuf:"bytes,2,opt,name=msgRecived,proto3,oneof"`
}

type RelayEventStream_RelayConnected struct {
	RelayConnected *RelayConnectedEvent `protobuf:"bytes,3,opt,name=relayConnected,proto3,oneof"`
}

type RelayEventStream_RelayDisconnected struct {
	RelayDisconnected *RelayDisconnectedEvent `protobuf:"bytes,4,opt,name=relayDisconnected,proto3,oneof"`
}

type RelayEventStream_RelayError struct {
	RelayError *RelayErrorEvent `protobuf:"bytes,5,opt,name=relayError,proto3,oneof"`
}

type RelayEventStream_PeerConnected struct {
	PeerConnected *PeerConnectedEvent `protobuf:"bytes,8,opt,name=peerConnected,proto3,oneof"`
}

type RelayEventStream_PeerDisconnected struct {
	PeerDisconnected *PeerDisconnectedEvent `protobuf:"bytes,9,opt,name=peerDisconnected,proto3,oneof"`
}

type RelayEventStream_PeerCalled struct {
	PeerCalled *PeerCalledEvent `protobuf:"bytes,10,opt,name=peerCalled,proto3,oneof"`
}

type RelayEventStream_PeerHungup struct {
	PeerHungup *PeerHungupEvent `protobuf:"bytes,11,opt,name=peerHungup,proto3,oneof"`
}

type RelayEventStream_PeerDataConnError struct {
	PeerDataConnError *PeerDataConnErrorEvent `protobuf:"bytes,12,opt,name=peerDataConnError,proto3,oneof"`
}

type RelayEventStream_PeerMediaConnError struct {
	PeerMediaConnError *PeerMediaConnErrorEvent `protobuf:"bytes,13,opt,name=peerMediaConnError,proto3,oneof"`
}

func (*RelayEventStream_MsgRecived) isRelayEventStream_Event() {}

func (*RelayEventStream_RelayConnected) isRelayEventStream_Event() {}

func (*RelayEventStream_RelayDisconnected) isRelayEventStream_Event() {}

func (*RelayEventStream_RelayError) isRelayEventStream_Event() {}

func (*RelayEventStream_PeerConnected) isRelayEventStream_Event() {}

func (*RelayEventStream_PeerDisconnected) isRelayEventStream_Event() {}

func (*RelayEventStream_PeerCalled) isRelayEventStream_Event() {}

func (*RelayEventStream_PeerHungup) isRelayEventStream_Event() {}

func (*RelayEventStream_PeerDataConnError) isRelayEventStream_Event() {}

func (*RelayEventStream_PeerMediaConnError) isRelayEventStream_Event() {}

// EventStreamRequest should be sent empty (no fields used)
type EventStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventStreamRequest) Reset() {
	*x = EventStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamRequest) ProtoMessage() {}

func (x *EventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamRequest.ProtoReflect.Descriptor instead.
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{11}
}

type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId          string  `protobuf:"bytes,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
	RelayPeerNumber *uint32 `protobuf:"varint,2,opt,name=relayPeerNumber,proto3,oneof" json:"relayPeerNumber,omitempty"`
	ExchangeId      *uint32 `protobuf:"varint,4,opt,name=exchangeId,proto3,oneof" json:"exchangeId,omitempty"`
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectionRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *ConnectionRequest) GetRelayPeerNumber() uint32 {
	if x != nil && x.RelayPeerNumber != nil {
		return *x.RelayPeerNumber
	}
	return 0
}

func (x *ConnectionRequest) GetExchangeId() uint32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

type ConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=webrtcrelay.Status" json:"status,omitempty"`
}

func (x *ConnectionResponse) Reset() {
	*x = ConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionResponse) ProtoMessage() {}

func (x *ConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionResponse.ProtoReflect.Descriptor instead.
func (*ConnectionResponse) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectionResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type CallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId          string  `protobuf:"bytes,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
	RelayPeerNumber *uint32 `protobuf:"varint,2,opt,name=relayPeerNumber,proto3,oneof" json:"relayPeerNumber,omitempty"`
	ExchangeId      *uint32 `protobuf:"varint,4,opt,name=exchangeId,proto3,oneof" json:"exchangeId,omitempty"`
}

func (x *CallRequest) Reset() {
	*x = CallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest) ProtoMessage() {}

func (x *CallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest.ProtoReflect.Descriptor instead.
func (*CallRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{14}
}

func (x *CallRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *CallRequest) GetRelayPeerNumber() uint32 {
	if x != nil && x.RelayPeerNumber != nil {
		return *x.RelayPeerNumber
	}
	return 0
}

func (x *CallRequest) GetExchangeId() uint32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

type CallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=webrtcrelay.Status" json:"status,omitempty"`
}

func (x *CallResponse) Reset() {
	*x = CallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse) ProtoMessage() {}

func (x *CallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse.ProtoReflect.Descriptor instead.
func (*CallResponse) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{15}
}

func (x *CallResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type HangupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId          string  `protobuf:"bytes,2,opt,name=peerId,proto3" json:"peerId,omitempty"`
	RelayPeerNumber *uint32 `protobuf:"varint,1,opt,name=relayPeerNumber,proto3,oneof" json:"relayPeerNumber,omitempty"`
	ExchangeId      *uint32 `protobuf:"varint,4,opt,name=exchangeId,proto3,oneof" json:"exchangeId,omitempty"`
}

func (x *HangupRequest) Reset() {
	*x = HangupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HangupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HangupRequest) ProtoMessage() {}

func (x *HangupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HangupRequest.ProtoReflect.Descriptor instead.
func (*HangupRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{16}
}

func (x *HangupRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *HangupRequest) GetRelayPeerNumber() uint32 {
	if x != nil && x.RelayPeerNumber != nil {
		return *x.RelayPeerNumber
	}
	return 0
}

func (x *HangupRequest) GetExchangeId() uint32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

type HangupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId string `protobuf:"bytes,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
}

func (x *HangupResponse) Reset() {
	*x = HangupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HangupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HangupResponse) ProtoMessage() {}

func (x *HangupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HangupResponse.ProtoReflect.Descriptor instead.
func (*HangupResponse) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{17}
}

func (x *HangupResponse) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type SendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPeerIds   []string `protobuf:"bytes,1,rep,name=targetPeerIds,proto3" json:"targetPeerIds,omitempty"`
	Payload         []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	RelayPeerNumber *uint32  `protobuf:"varint,3,opt,name=relayPeerNumber,proto3,oneof" json:"relayPeerNumber,omitempty"`
	ExchangeId      *uint32  `protobuf:"varint,4,opt,name=exchangeId,proto3,oneof" json:"exchangeId,omitempty"`
}

func (x *SendMsgRequest) Reset() {
	*x = SendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRequest) ProtoMessage() {}

func (x *SendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRequest.ProtoReflect.Descriptor instead.
func (*SendMsgRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{18}
}

func (x *SendMsgRequest) GetTargetPeerIds() []string {
	if x != nil {
		return x.TargetPeerIds
	}
	return nil
}

func (x *SendMsgRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SendMsgRequest) GetRelayPeerNumber() uint32 {
	if x != nil && x.RelayPeerNumber != nil {
		return *x.RelayPeerNumber
	}
	return 0
}

func (x *SendMsgRequest) GetExchangeId() uint32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

type SendMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=webrtcrelay.Status" json:"status,omitempty"`
}

func (x *SendMsgResponse) Reset() {
	*x = SendMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResponse) ProtoMessage() {}

func (x *SendMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResponse.ProtoReflect.Descriptor instead.
func (*SendMsgResponse) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{19}
}

func (x *SendMsgResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type RelayConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelayConfig) Reset() {
	*x = RelayConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayConfig) ProtoMessage() {}

func (x *RelayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayConfig.ProtoReflect.Descriptor instead.
func (*RelayConfig) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{20}
}

type AddRelayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddRelayRequest) Reset() {
	*x = AddRelayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRelayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRelayRequest) ProtoMessage() {}

func (x *AddRelayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRelayRequest.ProtoReflect.Descriptor instead.
func (*AddRelayRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{21}
}

type RelayPeerNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *RelayPeerNumber) Reset() {
	*x = RelayPeerNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayPeerNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayPeerNumber) ProtoMessage() {}

func (x *RelayPeerNumber) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayPeerNumber.ProtoReflect.Descriptor instead.
func (*RelayPeerNumber) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{22}
}

func (x *RelayPeerNumber) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

var File_webrtc_relay_proto protoreflect.FileDescriptor

var file_webrtc_relay_proto_rawDesc = []byte{
	0x0a, 0x12, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x22, 0x73, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x69, 0x76, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x0f, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x12,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0f,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x48,
	0x75, 0x6e, 0x67, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa8, 0x01, 0x0a,
	0x17, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xb8, 0x06, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x70,
	0x65, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x65, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x67, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x67, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x67, 0x75, 0x70, 0x12, 0x53, 0x0a,
	0x11, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x3b, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x01, 0x0a,
	0x0d, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x0e, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x3e, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x1b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0xbb, 0x01, 0x0a, 0x12,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x49, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x71, 0x0a, 0x0f, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x49, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x41, 0x59,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x04, 0x32, 0xdf, 0x05, 0x0a,
	0x0b, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x54, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x4c, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x42, 0x54,
	0x0a, 0x14, 0x69, 0x6f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x10, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x77, 0x2d, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_webrtc_relay_proto_rawDescOnce sync.Once
	file_webrtc_relay_proto_rawDescData = file_webrtc_relay_proto_rawDesc
)

func file_webrtc_relay_proto_rawDescGZIP() []byte {
	file_webrtc_relay_proto_rawDescOnce.Do(func() {
		file_webrtc_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_webrtc_relay_proto_rawDescData)
	})
	return file_webrtc_relay_proto_rawDescData
}

var file_webrtc_relay_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_webrtc_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_webrtc_relay_proto_goTypes = []interface{}{
	(Status)(0),                     // 0: webrtcrelay.Status
	(PeerConnErrorTypes)(0),         // 1: webrtcrelay.PeerConnErrorTypes
	(RelayErrorTypes)(0),            // 2: webrtcrelay.RelayErrorTypes
	(*MsgRecivedEvent)(nil),         // 3: webrtcrelay.MsgRecivedEvent
	(*RelayConnectedEvent)(nil),     // 4: webrtcrelay.RelayConnectedEvent
	(*RelayDisconnectedEvent)(nil),  // 5: webrtcrelay.RelayDisconnectedEvent
	(*RelayErrorEvent)(nil),         // 6: webrtcrelay.RelayErrorEvent
	(*PeerConnectedEvent)(nil),      // 7: webrtcrelay.PeerConnectedEvent
	(*PeerDisconnectedEvent)(nil),   // 8: webrtcrelay.PeerDisconnectedEvent
	(*PeerCalledEvent)(nil),         // 9: webrtcrelay.PeerCalledEvent
	(*PeerHungupEvent)(nil),         // 10: webrtcrelay.PeerHungupEvent
	(*PeerDataConnErrorEvent)(nil),  // 11: webrtcrelay.PeerDataConnErrorEvent
	(*PeerMediaConnErrorEvent)(nil), // 12: webrtcrelay.PeerMediaConnErrorEvent
	(*RelayEventStream)(nil),        // 13: webrtcrelay.RelayEventStream
	(*EventStreamRequest)(nil),      // 14: webrtcrelay.EventStreamRequest
	(*ConnectionRequest)(nil),       // 15: webrtcrelay.ConnectionRequest
	(*ConnectionResponse)(nil),      // 16: webrtcrelay.ConnectionResponse
	(*CallRequest)(nil),             // 17: webrtcrelay.CallRequest
	(*CallResponse)(nil),            // 18: webrtcrelay.CallResponse
	(*HangupRequest)(nil),           // 19: webrtcrelay.HangupRequest
	(*HangupResponse)(nil),          // 20: webrtcrelay.HangupResponse
	(*SendMsgRequest)(nil),          // 21: webrtcrelay.SendMsgRequest
	(*SendMsgResponse)(nil),         // 22: webrtcrelay.SendMsgResponse
	(*RelayConfig)(nil),             // 23: webrtcrelay.RelayConfig
	(*AddRelayRequest)(nil),         // 24: webrtcrelay.AddRelayRequest
	(*RelayPeerNumber)(nil),         // 25: webrtcrelay.RelayPeerNumber
}
var file_webrtc_relay_proto_depIdxs = []int32{
	2,  // 0: webrtcrelay.RelayErrorEvent.type:type_name -> webrtcrelay.RelayErrorTypes
	1,  // 1: webrtcrelay.PeerDataConnErrorEvent.type:type_name -> webrtcrelay.PeerConnErrorTypes
	1,  // 2: webrtcrelay.PeerMediaConnErrorEvent.type:type_name -> webrtcrelay.PeerConnErrorTypes
	3,  // 3: webrtcrelay.RelayEventStream.msgRecived:type_name -> webrtcrelay.MsgRecivedEvent
	4,  // 4: webrtcrelay.RelayEventStream.relayConnected:type_name -> webrtcrelay.RelayConnectedEvent
	5,  // 5: webrtcrelay.RelayEventStream.relayDisconnected:type_name -> webrtcrelay.RelayDisconnectedEvent
	6,  // 6: webrtcrelay.RelayEventStream.relayError:type_name -> webrtcrelay.RelayErrorEvent
	7,  // 7: webrtcrelay.RelayEventStream.peerConnected:type_name -> webrtcrelay.PeerConnectedEvent
	8,  // 8: webrtcrelay.RelayEventStream.peerDisconnected:type_name -> webrtcrelay.PeerDisconnectedEvent
	9,  // 9: webrtcrelay.RelayEventStream.peerCalled:type_name -> webrtcrelay.PeerCalledEvent
	10, // 10: webrtcrelay.RelayEventStream.peerHungup:type_name -> webrtcrelay.PeerHungupEvent
	11, // 11: webrtcrelay.RelayEventStream.peerDataConnError:type_name -> webrtcrelay.PeerDataConnErrorEvent
	12, // 12: webrtcrelay.RelayEventStream.peerMediaConnError:type_name -> webrtcrelay.PeerMediaConnErrorEvent
	0,  // 13: webrtcrelay.ConnectionResponse.status:type_name -> webrtcrelay.Status
	0,  // 14: webrtcrelay.CallResponse.status:type_name -> webrtcrelay.Status
	0,  // 15: webrtcrelay.SendMsgResponse.status:type_name -> webrtcrelay.Status
	14, // 16: webrtcrelay.WebRTCRelay.GetEventStream:input_type -> webrtcrelay.EventStreamRequest
	15, // 17: webrtcrelay.WebRTCRelay.ConnectToPeer:input_type -> webrtcrelay.ConnectionRequest
	15, // 18: webrtcrelay.WebRTCRelay.DisconnectFromPeer:input_type -> webrtcrelay.ConnectionRequest
	17, // 19: webrtcrelay.WebRTCRelay.CallPeer:input_type -> webrtcrelay.CallRequest
	15, // 20: webrtcrelay.WebRTCRelay.HangupPeer:input_type -> webrtcrelay.ConnectionRequest
	21, // 21: webrtcrelay.WebRTCRelay.SendMsgStream:input_type -> webrtcrelay.SendMsgRequest
	24, // 22: webrtcrelay.WebRTCRelay.AddRelayPeer:input_type -> webrtcrelay.AddRelayRequest
	25, // 23: webrtcrelay.WebRTCRelay.CloseRelayPeer:input_type -> webrtcrelay.RelayPeerNumber
	25, // 24: webrtcrelay.WebRTCRelay.GetRelayPeerConfig:input_type -> webrtcrelay.RelayPeerNumber
	13, // 25: webrtcrelay.WebRTCRelay.GetEventStream:output_type -> webrtcrelay.RelayEventStream
	16, // 26: webrtcrelay.WebRTCRelay.ConnectToPeer:output_type -> webrtcrelay.ConnectionResponse
	16, // 27: webrtcrelay.WebRTCRelay.DisconnectFromPeer:output_type -> webrtcrelay.ConnectionResponse
	18, // 28: webrtcrelay.WebRTCRelay.CallPeer:output_type -> webrtcrelay.CallResponse
	18, // 29: webrtcrelay.WebRTCRelay.HangupPeer:output_type -> webrtcrelay.CallResponse
	16, // 30: webrtcrelay.WebRTCRelay.SendMsgStream:output_type -> webrtcrelay.ConnectionResponse
	6,  // 31: webrtcrelay.WebRTCRelay.AddRelayPeer:output_type -> webrtcrelay.RelayErrorEvent
	6,  // 32: webrtcrelay.WebRTCRelay.CloseRelayPeer:output_type -> webrtcrelay.RelayErrorEvent
	23, // 33: webrtcrelay.WebRTCRelay.GetRelayPeerConfig:output_type -> webrtcrelay.RelayConfig
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_webrtc_relay_proto_init() }
func file_webrtc_relay_proto_init() {
	if File_webrtc_relay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webrtc_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRecivedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayConnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayDisconnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerConnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDisconnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCalledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerHungupEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDataConnErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerMediaConnErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HangupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HangupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRelayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayPeerNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_webrtc_relay_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RelayEventStream_MsgRecived)(nil),
		(*RelayEventStream_RelayConnected)(nil),
		(*RelayEventStream_RelayDisconnected)(nil),
		(*RelayEventStream_RelayError)(nil),
		(*RelayEventStream_PeerConnected)(nil),
		(*RelayEventStream_PeerDisconnected)(nil),
		(*RelayEventStream_PeerCalled)(nil),
		(*RelayEventStream_PeerHungup)(nil),
		(*RelayEventStream_PeerDataConnError)(nil),
		(*RelayEventStream_PeerMediaConnError)(nil),
	}
	file_webrtc_relay_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_webrtc_relay_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_webrtc_relay_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_webrtc_relay_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webrtc_relay_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_webrtc_relay_proto_goTypes,
		DependencyIndexes: file_webrtc_relay_proto_depIdxs,
		EnumInfos:         file_webrtc_relay_proto_enumTypes,
		MessageInfos:      file_webrtc_relay_proto_msgTypes,
	}.Build()
	File_webrtc_relay_proto = out.File
	file_webrtc_relay_proto_rawDesc = nil
	file_webrtc_relay_proto_goTypes = nil
	file_webrtc_relay_proto_depIdxs = nil
}
