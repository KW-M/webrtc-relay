// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: webrtc-relay.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebRTCRelayClient is the client API for WebRTCRelay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebRTCRelayClient interface {
	// Get a stream of events from the webrtc-relay server including recived messages, peer dis/connection events, relay dis/connection events, errors etc.
	// see the RelayEventStream type for more details
	// This is a server-side streaming RPC
	// The client should send an empty EventStreamRequest message to start the stream
	EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (WebRTCRelay_EventStreamClient, error)
	ConnectToPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	DisconnectFromPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	CallPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	HangupPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	SendMsgStream(ctx context.Context, opts ...grpc.CallOption) (WebRTCRelay_SendMsgStreamClient, error)
}

type webRTCRelayClient struct {
	cc grpc.ClientConnInterface
}

func NewWebRTCRelayClient(cc grpc.ClientConnInterface) WebRTCRelayClient {
	return &webRTCRelayClient{cc}
}

func (c *webRTCRelayClient) EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (WebRTCRelay_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebRTCRelay_ServiceDesc.Streams[0], "/webrtcrelay.WebRTCRelay/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &webRTCRelayEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebRTCRelay_EventStreamClient interface {
	Recv() (*RelayEventStream, error)
	grpc.ClientStream
}

type webRTCRelayEventStreamClient struct {
	grpc.ClientStream
}

func (x *webRTCRelayEventStreamClient) Recv() (*RelayEventStream, error) {
	m := new(RelayEventStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webRTCRelayClient) ConnectToPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/webrtcrelay.WebRTCRelay/ConnectToPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCRelayClient) DisconnectFromPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/webrtcrelay.WebRTCRelay/DisconnectFromPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCRelayClient) CallPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/webrtcrelay.WebRTCRelay/CallPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCRelayClient) HangupPeer(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/webrtcrelay.WebRTCRelay/HangupPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCRelayClient) SendMsgStream(ctx context.Context, opts ...grpc.CallOption) (WebRTCRelay_SendMsgStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebRTCRelay_ServiceDesc.Streams[1], "/webrtcrelay.WebRTCRelay/SendMsgStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &webRTCRelaySendMsgStreamClient{stream}
	return x, nil
}

type WebRTCRelay_SendMsgStreamClient interface {
	Send(*SendMsgRequest) error
	CloseAndRecv() (*ConnectionResponse, error)
	grpc.ClientStream
}

type webRTCRelaySendMsgStreamClient struct {
	grpc.ClientStream
}

func (x *webRTCRelaySendMsgStreamClient) Send(m *SendMsgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webRTCRelaySendMsgStreamClient) CloseAndRecv() (*ConnectionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebRTCRelayServer is the server API for WebRTCRelay service.
// All implementations must embed UnimplementedWebRTCRelayServer
// for forward compatibility
type WebRTCRelayServer interface {
	// Get a stream of events from the webrtc-relay server including recived messages, peer dis/connection events, relay dis/connection events, errors etc.
	// see the RelayEventStream type for more details
	// This is a server-side streaming RPC
	// The client should send an empty EventStreamRequest message to start the stream
	EventStream(*EventStreamRequest, WebRTCRelay_EventStreamServer) error
	ConnectToPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	DisconnectFromPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	CallPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	HangupPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	SendMsgStream(WebRTCRelay_SendMsgStreamServer) error
	mustEmbedUnimplementedWebRTCRelayServer()
}

// UnimplementedWebRTCRelayServer must be embedded to have forward compatible implementations.
type UnimplementedWebRTCRelayServer struct {
}

func (UnimplementedWebRTCRelayServer) EventStream(*EventStreamRequest, WebRTCRelay_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedWebRTCRelayServer) ConnectToPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToPeer not implemented")
}
func (UnimplementedWebRTCRelayServer) DisconnectFromPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectFromPeer not implemented")
}
func (UnimplementedWebRTCRelayServer) CallPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallPeer not implemented")
}
func (UnimplementedWebRTCRelayServer) HangupPeer(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HangupPeer not implemented")
}
func (UnimplementedWebRTCRelayServer) SendMsgStream(WebRTCRelay_SendMsgStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMsgStream not implemented")
}
func (UnimplementedWebRTCRelayServer) mustEmbedUnimplementedWebRTCRelayServer() {}

// UnsafeWebRTCRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebRTCRelayServer will
// result in compilation errors.
type UnsafeWebRTCRelayServer interface {
	mustEmbedUnimplementedWebRTCRelayServer()
}

func RegisterWebRTCRelayServer(s grpc.ServiceRegistrar, srv WebRTCRelayServer) {
	s.RegisterService(&WebRTCRelay_ServiceDesc, srv)
}

func _WebRTCRelay_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebRTCRelayServer).EventStream(m, &webRTCRelayEventStreamServer{stream})
}

type WebRTCRelay_EventStreamServer interface {
	Send(*RelayEventStream) error
	grpc.ServerStream
}

type webRTCRelayEventStreamServer struct {
	grpc.ServerStream
}

func (x *webRTCRelayEventStreamServer) Send(m *RelayEventStream) error {
	return x.ServerStream.SendMsg(m)
}

func _WebRTCRelay_ConnectToPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCRelayServer).ConnectToPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrtcrelay.WebRTCRelay/ConnectToPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCRelayServer).ConnectToPeer(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCRelay_DisconnectFromPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCRelayServer).DisconnectFromPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrtcrelay.WebRTCRelay/DisconnectFromPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCRelayServer).DisconnectFromPeer(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCRelay_CallPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCRelayServer).CallPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrtcrelay.WebRTCRelay/CallPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCRelayServer).CallPeer(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCRelay_HangupPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCRelayServer).HangupPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrtcrelay.WebRTCRelay/HangupPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCRelayServer).HangupPeer(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCRelay_SendMsgStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebRTCRelayServer).SendMsgStream(&webRTCRelaySendMsgStreamServer{stream})
}

type WebRTCRelay_SendMsgStreamServer interface {
	SendAndClose(*ConnectionResponse) error
	Recv() (*SendMsgRequest, error)
	grpc.ServerStream
}

type webRTCRelaySendMsgStreamServer struct {
	grpc.ServerStream
}

func (x *webRTCRelaySendMsgStreamServer) SendAndClose(m *ConnectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webRTCRelaySendMsgStreamServer) Recv() (*SendMsgRequest, error) {
	m := new(SendMsgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebRTCRelay_ServiceDesc is the grpc.ServiceDesc for WebRTCRelay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebRTCRelay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webrtcrelay.WebRTCRelay",
	HandlerType: (*WebRTCRelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectToPeer",
			Handler:    _WebRTCRelay_ConnectToPeer_Handler,
		},
		{
			MethodName: "DisconnectFromPeer",
			Handler:    _WebRTCRelay_DisconnectFromPeer_Handler,
		},
		{
			MethodName: "CallPeer",
			Handler:    _WebRTCRelay_CallPeer_Handler,
		},
		{
			MethodName: "HangupPeer",
			Handler:    _WebRTCRelay_HangupPeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _WebRTCRelay_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMsgStream",
			Handler:       _WebRTCRelay_SendMsgStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "webrtc-relay.proto",
}
