// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: webrtc-relay.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK    Status = 0
	Status_ERROR Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	Status_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0}
}

type PeerConnErrorTypes int32

const (
	PeerConnErrorTypes_UNKNOWN_ERROR                PeerConnErrorTypes = 0
	PeerConnErrorTypes_INVALID_RELAY_PEER_CONFIG_ID PeerConnErrorTypes = 1
	PeerConnErrorTypes_INVALID_TARGET_PEERID        PeerConnErrorTypes = 2
	PeerConnErrorTypes_PEER_NOT_FOUND               PeerConnErrorTypes = 3
	PeerConnErrorTypes_NETWORK_ERROR                PeerConnErrorTypes = 4
)

// Enum value maps for PeerConnErrorTypes.
var (
	PeerConnErrorTypes_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "INVALID_RELAY_PEER_CONFIG_ID",
		2: "INVALID_TARGET_PEERID",
		3: "PEER_NOT_FOUND",
		4: "NETWORK_ERROR",
	}
	PeerConnErrorTypes_value = map[string]int32{
		"UNKNOWN_ERROR":                0,
		"INVALID_RELAY_PEER_CONFIG_ID": 1,
		"INVALID_TARGET_PEERID":        2,
		"PEER_NOT_FOUND":               3,
		"NETWORK_ERROR":                4,
	}
)

func (x PeerConnErrorTypes) Enum() *PeerConnErrorTypes {
	p := new(PeerConnErrorTypes)
	*p = x
	return p
}

func (x PeerConnErrorTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerConnErrorTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[1].Descriptor()
}

func (PeerConnErrorTypes) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[1]
}

func (x PeerConnErrorTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerConnErrorTypes.Descriptor instead.
func (PeerConnErrorTypes) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{1}
}

type RelayEventTypes int32

const (
	RelayEventTypes_MESSAGE_RECEIVED   RelayEventTypes = 0  // MsgRecivedEvent
	RelayEventTypes_RELAY_CONNECTED    RelayEventTypes = 4  // RelayConnectionEvent
	RelayEventTypes_RELAY_DISCONNECTED RelayEventTypes = 5  // ^ ditto
	RelayEventTypes_RELAY_ERROR        RelayEventTypes = 6  // RelayErrorEvent
	RelayEventTypes_PEER_CONNECTED     RelayEventTypes = 8  // PeerConnectionEvent
	RelayEventTypes_PEER_DISCONNECTED  RelayEventTypes = 9  // ^ ditto
	RelayEventTypes_PEER_CALLED        RelayEventTypes = 10 // PeerCalledEvent
	RelayEventTypes_PEER_HUNGUP        RelayEventTypes = 11 // PeerConnectionEvent
	RelayEventTypes_PEER_CONN_ERROR    RelayEventTypes = 12 // PeerConnErrorEvent
)

// Enum value maps for RelayEventTypes.
var (
	RelayEventTypes_name = map[int32]string{
		0:  "MESSAGE_RECEIVED",
		4:  "RELAY_CONNECTED",
		5:  "RELAY_DISCONNECTED",
		6:  "RELAY_ERROR",
		8:  "PEER_CONNECTED",
		9:  "PEER_DISCONNECTED",
		10: "PEER_CALLED",
		11: "PEER_HUNGUP",
		12: "PEER_CONN_ERROR",
	}
	RelayEventTypes_value = map[string]int32{
		"MESSAGE_RECEIVED":   0,
		"RELAY_CONNECTED":    4,
		"RELAY_DISCONNECTED": 5,
		"RELAY_ERROR":        6,
		"PEER_CONNECTED":     8,
		"PEER_DISCONNECTED":  9,
		"PEER_CALLED":        10,
		"PEER_HUNGUP":        11,
		"PEER_CONN_ERROR":    12,
	}
)

func (x RelayEventTypes) Enum() *RelayEventTypes {
	p := new(RelayEventTypes)
	*p = x
	return p
}

func (x RelayEventTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayEventTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[2].Descriptor()
}

func (RelayEventTypes) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[2]
}

func (x RelayEventTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayEventTypes.Descriptor instead.
func (RelayEventTypes) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{2}
}

type RelayEventStream_RelayErrorEvent_RelayErrorTypes int32

const (
	RelayEventStream_RelayErrorEvent_UNKNOWN_ERROR    RelayEventStream_RelayErrorEvent_RelayErrorTypes = 0
	RelayEventStream_RelayErrorEvent_INVALID_REQUEST  RelayEventStream_RelayErrorEvent_RelayErrorTypes = 1
	RelayEventStream_RelayErrorEvent_SERVER_NOT_FOUND RelayEventStream_RelayErrorEvent_RelayErrorTypes = 2
	RelayEventStream_RelayErrorEvent_INVALID_PEERID   RelayEventStream_RelayErrorEvent_RelayErrorTypes = 3
)

// Enum value maps for RelayEventStream_RelayErrorEvent_RelayErrorTypes.
var (
	RelayEventStream_RelayErrorEvent_RelayErrorTypes_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "INVALID_REQUEST",
		2: "SERVER_NOT_FOUND",
		3: "INVALID_PEERID",
	}
	RelayEventStream_RelayErrorEvent_RelayErrorTypes_value = map[string]int32{
		"UNKNOWN_ERROR":    0,
		"INVALID_REQUEST":  1,
		"SERVER_NOT_FOUND": 2,
		"INVALID_PEERID":   3,
	}
)

func (x RelayEventStream_RelayErrorEvent_RelayErrorTypes) Enum() *RelayEventStream_RelayErrorEvent_RelayErrorTypes {
	p := new(RelayEventStream_RelayErrorEvent_RelayErrorTypes)
	*p = x
	return p
}

func (x RelayEventStream_RelayErrorEvent_RelayErrorTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayEventStream_RelayErrorEvent_RelayErrorTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_webrtc_relay_proto_enumTypes[3].Descriptor()
}

func (RelayEventStream_RelayErrorEvent_RelayErrorTypes) Type() protoreflect.EnumType {
	return &file_webrtc_relay_proto_enumTypes[3]
}

func (x RelayEventStream_RelayErrorEvent_RelayErrorTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayEventStream_RelayErrorEvent_RelayErrorTypes.Descriptor instead.
func (RelayEventStream_RelayErrorEvent_RelayErrorTypes) EnumDescriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 2, 0}
}

type RelayEventStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType RelayEventTypes `protobuf:"varint,1,opt,name=eventType,proto3,enum=webrtcrelay.RelayEventTypes" json:"eventType,omitempty"`
	// Types that are assignable to EventDetails:
	//
	//	*RelayEventStream_Msg
	//	*RelayEventStream_RelayEvent
	//	*RelayEventStream_RelayError
	//	*RelayEventStream_PeerConnection
	//	*RelayEventStream_PeerCalled
	//	*RelayEventStream_PeerConnError
	EventDetails isRelayEventStream_EventDetails `protobuf_oneof:"eventDetails"`
}

func (x *RelayEventStream) Reset() {
	*x = RelayEventStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream) ProtoMessage() {}

func (x *RelayEventStream) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream.ProtoReflect.Descriptor instead.
func (*RelayEventStream) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0}
}

func (x *RelayEventStream) GetEventType() RelayEventTypes {
	if x != nil {
		return x.EventType
	}
	return RelayEventTypes_MESSAGE_RECEIVED
}

func (m *RelayEventStream) GetEventDetails() isRelayEventStream_EventDetails {
	if m != nil {
		return m.EventDetails
	}
	return nil
}

func (x *RelayEventStream) GetMsg() *RelayEventStream_MsgRecivedEvent {
	if x, ok := x.GetEventDetails().(*RelayEventStream_Msg); ok {
		return x.Msg
	}
	return nil
}

func (x *RelayEventStream) GetRelayEvent() *RelayEventStream_RelayConnectionEvent {
	if x, ok := x.GetEventDetails().(*RelayEventStream_RelayEvent); ok {
		return x.RelayEvent
	}
	return nil
}

func (x *RelayEventStream) GetRelayError() *RelayEventStream_RelayErrorEvent {
	if x, ok := x.GetEventDetails().(*RelayEventStream_RelayError); ok {
		return x.RelayError
	}
	return nil
}

func (x *RelayEventStream) GetPeerConnection() *RelayEventStream_PeerConnectionEvent {
	if x, ok := x.GetEventDetails().(*RelayEventStream_PeerConnection); ok {
		return x.PeerConnection
	}
	return nil
}

func (x *RelayEventStream) GetPeerCalled() *RelayEventStream_PeerCalledEvent {
	if x, ok := x.GetEventDetails().(*RelayEventStream_PeerCalled); ok {
		return x.PeerCalled
	}
	return nil
}

func (x *RelayEventStream) GetPeerConnError() *RelayEventStream_PeerConnErrorEvent {
	if x, ok := x.GetEventDetails().(*RelayEventStream_PeerConnError); ok {
		return x.PeerConnError
	}
	return nil
}

type isRelayEventStream_EventDetails interface {
	isRelayEventStream_EventDetails()
}

type RelayEventStream_Msg struct {
	Msg *RelayEventStream_MsgRecivedEvent `protobuf:"bytes,2,opt,name=msg,proto3,oneof"`
}

type RelayEventStream_RelayEvent struct {
	RelayEvent *RelayEventStream_RelayConnectionEvent `protobuf:"bytes,3,opt,name=relayEvent,proto3,oneof"`
}

type RelayEventStream_RelayError struct {
	RelayError *RelayEventStream_RelayErrorEvent `protobuf:"bytes,5,opt,name=relayError,proto3,oneof"`
}

type RelayEventStream_PeerConnection struct {
	PeerConnection *RelayEventStream_PeerConnectionEvent `protobuf:"bytes,8,opt,name=peerConnection,proto3,oneof"`
}

type RelayEventStream_PeerCalled struct {
	PeerCalled *RelayEventStream_PeerCalledEvent `protobuf:"bytes,10,opt,name=peerCalled,proto3,oneof"`
}

type RelayEventStream_PeerConnError struct {
	PeerConnError *RelayEventStream_PeerConnErrorEvent `protobuf:"bytes,11,opt,name=peerConnError,proto3,oneof"`
}

func (*RelayEventStream_Msg) isRelayEventStream_EventDetails() {}

func (*RelayEventStream_RelayEvent) isRelayEventStream_EventDetails() {}

func (*RelayEventStream_RelayError) isRelayEventStream_EventDetails() {}

func (*RelayEventStream_PeerConnection) isRelayEventStream_EventDetails() {}

func (*RelayEventStream_PeerCalled) isRelayEventStream_EventDetails() {}

func (*RelayEventStream_PeerConnError) isRelayEventStream_EventDetails() {}

type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId uint32 `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
	PeerId            string `protobuf:"bytes,2,opt,name=peerId,proto3" json:"peerId,omitempty"`
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionRequest) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

func (x *ConnectionRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type ConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status              `protobuf:"varint,1,opt,name=status,proto3,enum=webrtcrelay.Status" json:"status,omitempty"`
	Error  *PeerConnErrorTypes `protobuf:"varint,2,opt,name=error,proto3,enum=webrtcrelay.PeerConnErrorTypes,oneof" json:"error,omitempty"`
}

func (x *ConnectionResponse) Reset() {
	*x = ConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionResponse) ProtoMessage() {}

func (x *ConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionResponse.ProtoReflect.Descriptor instead.
func (*ConnectionResponse) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *ConnectionResponse) GetError() PeerConnErrorTypes {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return PeerConnErrorTypes_UNKNOWN_ERROR
}

type SendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId *uint32  `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3,oneof" json:"relayPeerConfigId,omitempty"`
	TargetPeerIds     []string `protobuf:"bytes,2,rep,name=targetPeerIds,proto3" json:"targetPeerIds,omitempty"`
	Payload           []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SendMsgRequest) Reset() {
	*x = SendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRequest) ProtoMessage() {}

func (x *SendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRequest.ProtoReflect.Descriptor instead.
func (*SendMsgRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{3}
}

func (x *SendMsgRequest) GetRelayPeerConfigId() uint32 {
	if x != nil && x.RelayPeerConfigId != nil {
		return *x.RelayPeerConfigId
	}
	return 0
}

func (x *SendMsgRequest) GetTargetPeerIds() []string {
	if x != nil {
		return x.TargetPeerIds
	}
	return nil
}

func (x *SendMsgRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SendMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status              `protobuf:"varint,1,opt,name=status,proto3,enum=webrtcrelay.Status" json:"status,omitempty"`
	Error  *PeerConnErrorTypes `protobuf:"varint,2,opt,name=error,proto3,enum=webrtcrelay.PeerConnErrorTypes,oneof" json:"error,omitempty"`
}

func (x *SendMsgResponse) Reset() {
	*x = SendMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResponse) ProtoMessage() {}

func (x *SendMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResponse.ProtoReflect.Descriptor instead.
func (*SendMsgResponse) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{4}
}

func (x *SendMsgResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *SendMsgResponse) GetError() PeerConnErrorTypes {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return PeerConnErrorTypes_UNKNOWN_ERROR
}

type EventStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventStreamRequest) Reset() {
	*x = EventStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamRequest) ProtoMessage() {}

func (x *EventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamRequest.ProtoReflect.Descriptor instead.
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{5}
}

type RelayEventStream_MsgRecivedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPeerId         string `protobuf:"bytes,1,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
	RelayPeerConfigId uint32 `protobuf:"varint,2,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
	Payload           []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RelayEventStream_MsgRecivedEvent) Reset() {
	*x = RelayEventStream_MsgRecivedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream_MsgRecivedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream_MsgRecivedEvent) ProtoMessage() {}

func (x *RelayEventStream_MsgRecivedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream_MsgRecivedEvent.ProtoReflect.Descriptor instead.
func (*RelayEventStream_MsgRecivedEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RelayEventStream_MsgRecivedEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

func (x *RelayEventStream_MsgRecivedEvent) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

func (x *RelayEventStream_MsgRecivedEvent) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RelayEventStream_RelayConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId uint32 `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
}

func (x *RelayEventStream_RelayConnectionEvent) Reset() {
	*x = RelayEventStream_RelayConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream_RelayConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream_RelayConnectionEvent) ProtoMessage() {}

func (x *RelayEventStream_RelayConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream_RelayConnectionEvent.ProtoReflect.Descriptor instead.
func (*RelayEventStream_RelayConnectionEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RelayEventStream_RelayConnectionEvent) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

type RelayEventStream_RelayErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId uint32                                           `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
	Error             RelayEventStream_RelayErrorEvent_RelayErrorTypes `protobuf:"varint,2,opt,name=error,proto3,enum=webrtcrelay.RelayEventStream_RelayErrorEvent_RelayErrorTypes" json:"error,omitempty"`
}

func (x *RelayEventStream_RelayErrorEvent) Reset() {
	*x = RelayEventStream_RelayErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream_RelayErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream_RelayErrorEvent) ProtoMessage() {}

func (x *RelayEventStream_RelayErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream_RelayErrorEvent.ProtoReflect.Descriptor instead.
func (*RelayEventStream_RelayErrorEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RelayEventStream_RelayErrorEvent) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

func (x *RelayEventStream_RelayErrorEvent) GetError() RelayEventStream_RelayErrorEvent_RelayErrorTypes {
	if x != nil {
		return x.Error
	}
	return RelayEventStream_RelayErrorEvent_UNKNOWN_ERROR
}

type RelayEventStream_PeerConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId uint32 `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
	SrcPeerId         string `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"`
}

func (x *RelayEventStream_PeerConnectionEvent) Reset() {
	*x = RelayEventStream_PeerConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream_PeerConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream_PeerConnectionEvent) ProtoMessage() {}

func (x *RelayEventStream_PeerConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream_PeerConnectionEvent.ProtoReflect.Descriptor instead.
func (*RelayEventStream_PeerConnectionEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RelayEventStream_PeerConnectionEvent) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

func (x *RelayEventStream_PeerConnectionEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

type RelayEventStream_PeerCalledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId uint32 `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
	SrcPeerId         string `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"` // more fields tbd
}

func (x *RelayEventStream_PeerCalledEvent) Reset() {
	*x = RelayEventStream_PeerCalledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream_PeerCalledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream_PeerCalledEvent) ProtoMessage() {}

func (x *RelayEventStream_PeerCalledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream_PeerCalledEvent.ProtoReflect.Descriptor instead.
func (*RelayEventStream_PeerCalledEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RelayEventStream_PeerCalledEvent) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

func (x *RelayEventStream_PeerCalledEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

type RelayEventStream_PeerConnErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayPeerConfigId uint32 `protobuf:"varint,1,opt,name=relayPeerConfigId,proto3" json:"relayPeerConfigId,omitempty"`
	SrcPeerId         string `protobuf:"bytes,2,opt,name=srcPeerId,proto3" json:"srcPeerId,omitempty"` // more fields tbd
}

func (x *RelayEventStream_PeerConnErrorEvent) Reset() {
	*x = RelayEventStream_PeerConnErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webrtc_relay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayEventStream_PeerConnErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayEventStream_PeerConnErrorEvent) ProtoMessage() {}

func (x *RelayEventStream_PeerConnErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webrtc_relay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayEventStream_PeerConnErrorEvent.ProtoReflect.Descriptor instead.
func (*RelayEventStream_PeerConnErrorEvent) Descriptor() ([]byte, []int) {
	return file_webrtc_relay_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RelayEventStream_PeerConnErrorEvent) GetRelayPeerConfigId() uint32 {
	if x != nil {
		return x.RelayPeerConfigId
	}
	return 0
}

func (x *RelayEventStream_PeerConnErrorEvent) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

var File_webrtc_relay_proto protoreflect.FileDescriptor

var file_webrtc_relay_proto_rawDesc = []byte{
	0x0a, 0x12, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x22, 0xaf, 0x0a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x63, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x54, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x0e,
	0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x65, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0x77, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x69, 0x76,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x44, 0x0a,
	0x14, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x1a, 0xf9, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x0f, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x49, 0x44, 0x10, 0x03, 0x1a,
	0x61, 0x0a, 0x13, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x1a, 0x5d, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0x60, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2a, 0x1b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x8b,
	0x01, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x49, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xc7, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x48, 0x55, 0x4e, 0x47, 0x55, 0x50, 0x10,
	0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x32, 0x80, 0x04, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x54, 0x0a, 0x14, 0x69, 0x6f, 0x2e,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x10, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x77, 0x2d, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2d, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_webrtc_relay_proto_rawDescOnce sync.Once
	file_webrtc_relay_proto_rawDescData = file_webrtc_relay_proto_rawDesc
)

func file_webrtc_relay_proto_rawDescGZIP() []byte {
	file_webrtc_relay_proto_rawDescOnce.Do(func() {
		file_webrtc_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_webrtc_relay_proto_rawDescData)
	})
	return file_webrtc_relay_proto_rawDescData
}

var file_webrtc_relay_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_webrtc_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_webrtc_relay_proto_goTypes = []interface{}{
	(Status)(0),             // 0: webrtcrelay.Status
	(PeerConnErrorTypes)(0), // 1: webrtcrelay.PeerConnErrorTypes
	(RelayEventTypes)(0),    // 2: webrtcrelay.RelayEventTypes
	(RelayEventStream_RelayErrorEvent_RelayErrorTypes)(0), // 3: webrtcrelay.RelayEventStream.RelayErrorEvent.RelayErrorTypes
	(*RelayEventStream)(nil),                              // 4: webrtcrelay.RelayEventStream
	(*ConnectionRequest)(nil),                             // 5: webrtcrelay.ConnectionRequest
	(*ConnectionResponse)(nil),                            // 6: webrtcrelay.ConnectionResponse
	(*SendMsgRequest)(nil),                                // 7: webrtcrelay.SendMsgRequest
	(*SendMsgResponse)(nil),                               // 8: webrtcrelay.SendMsgResponse
	(*EventStreamRequest)(nil),                            // 9: webrtcrelay.EventStreamRequest
	(*RelayEventStream_MsgRecivedEvent)(nil),              // 10: webrtcrelay.RelayEventStream.MsgRecivedEvent
	(*RelayEventStream_RelayConnectionEvent)(nil),         // 11: webrtcrelay.RelayEventStream.RelayConnectionEvent
	(*RelayEventStream_RelayErrorEvent)(nil),              // 12: webrtcrelay.RelayEventStream.RelayErrorEvent
	(*RelayEventStream_PeerConnectionEvent)(nil),          // 13: webrtcrelay.RelayEventStream.PeerConnectionEvent
	(*RelayEventStream_PeerCalledEvent)(nil),              // 14: webrtcrelay.RelayEventStream.PeerCalledEvent
	(*RelayEventStream_PeerConnErrorEvent)(nil),           // 15: webrtcrelay.RelayEventStream.PeerConnErrorEvent
}
var file_webrtc_relay_proto_depIdxs = []int32{
	2,  // 0: webrtcrelay.RelayEventStream.eventType:type_name -> webrtcrelay.RelayEventTypes
	10, // 1: webrtcrelay.RelayEventStream.msg:type_name -> webrtcrelay.RelayEventStream.MsgRecivedEvent
	11, // 2: webrtcrelay.RelayEventStream.relayEvent:type_name -> webrtcrelay.RelayEventStream.RelayConnectionEvent
	12, // 3: webrtcrelay.RelayEventStream.relayError:type_name -> webrtcrelay.RelayEventStream.RelayErrorEvent
	13, // 4: webrtcrelay.RelayEventStream.peerConnection:type_name -> webrtcrelay.RelayEventStream.PeerConnectionEvent
	14, // 5: webrtcrelay.RelayEventStream.peerCalled:type_name -> webrtcrelay.RelayEventStream.PeerCalledEvent
	15, // 6: webrtcrelay.RelayEventStream.peerConnError:type_name -> webrtcrelay.RelayEventStream.PeerConnErrorEvent
	0,  // 7: webrtcrelay.ConnectionResponse.status:type_name -> webrtcrelay.Status
	1,  // 8: webrtcrelay.ConnectionResponse.error:type_name -> webrtcrelay.PeerConnErrorTypes
	0,  // 9: webrtcrelay.SendMsgResponse.status:type_name -> webrtcrelay.Status
	1,  // 10: webrtcrelay.SendMsgResponse.error:type_name -> webrtcrelay.PeerConnErrorTypes
	3,  // 11: webrtcrelay.RelayEventStream.RelayErrorEvent.error:type_name -> webrtcrelay.RelayEventStream.RelayErrorEvent.RelayErrorTypes
	9,  // 12: webrtcrelay.WebRTCRelay.EventStream:input_type -> webrtcrelay.EventStreamRequest
	5,  // 13: webrtcrelay.WebRTCRelay.ConnectToPeer:input_type -> webrtcrelay.ConnectionRequest
	5,  // 14: webrtcrelay.WebRTCRelay.DisconnectFromPeer:input_type -> webrtcrelay.ConnectionRequest
	5,  // 15: webrtcrelay.WebRTCRelay.CallPeer:input_type -> webrtcrelay.ConnectionRequest
	5,  // 16: webrtcrelay.WebRTCRelay.HangupPeer:input_type -> webrtcrelay.ConnectionRequest
	7,  // 17: webrtcrelay.WebRTCRelay.SendMsgStream:input_type -> webrtcrelay.SendMsgRequest
	4,  // 18: webrtcrelay.WebRTCRelay.EventStream:output_type -> webrtcrelay.RelayEventStream
	6,  // 19: webrtcrelay.WebRTCRelay.ConnectToPeer:output_type -> webrtcrelay.ConnectionResponse
	6,  // 20: webrtcrelay.WebRTCRelay.DisconnectFromPeer:output_type -> webrtcrelay.ConnectionResponse
	6,  // 21: webrtcrelay.WebRTCRelay.CallPeer:output_type -> webrtcrelay.ConnectionResponse
	6,  // 22: webrtcrelay.WebRTCRelay.HangupPeer:output_type -> webrtcrelay.ConnectionResponse
	6,  // 23: webrtcrelay.WebRTCRelay.SendMsgStream:output_type -> webrtcrelay.ConnectionResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_webrtc_relay_proto_init() }
func file_webrtc_relay_proto_init() {
	if File_webrtc_relay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webrtc_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream_MsgRecivedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream_RelayConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream_RelayErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream_PeerConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream_PeerCalledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webrtc_relay_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayEventStream_PeerConnErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_webrtc_relay_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RelayEventStream_Msg)(nil),
		(*RelayEventStream_RelayEvent)(nil),
		(*RelayEventStream_RelayError)(nil),
		(*RelayEventStream_PeerConnection)(nil),
		(*RelayEventStream_PeerCalled)(nil),
		(*RelayEventStream_PeerConnError)(nil),
	}
	file_webrtc_relay_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_webrtc_relay_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_webrtc_relay_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webrtc_relay_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_webrtc_relay_proto_goTypes,
		DependencyIndexes: file_webrtc_relay_proto_depIdxs,
		EnumInfos:         file_webrtc_relay_proto_enumTypes,
		MessageInfos:      file_webrtc_relay_proto_msgTypes,
	}.Build()
	File_webrtc_relay_proto = out.File
	file_webrtc_relay_proto_rawDesc = nil
	file_webrtc_relay_proto_goTypes = nil
	file_webrtc_relay_proto_depIdxs = nil
}
